// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/proto/service.proto

package protoapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PingRequest struct {
}

func (m *PingRequest) Reset()      { *m = PingRequest{} }
func (*PingRequest) ProtoMessage() {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{0}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PingResponse struct {
}

func (m *PingResponse) Reset()      { *m = PingResponse{} }
func (*PingResponse) ProtoMessage() {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{1}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

type GetStatsRequest struct {
}

func (m *GetStatsRequest) Reset()      { *m = GetStatsRequest{} }
func (*GetStatsRequest) ProtoMessage() {}
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{2}
}
func (m *GetStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatsRequest.Merge(m, src)
}
func (m *GetStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatsRequest proto.InternalMessageInfo

type GetStatsResponse struct {
	Urls  int64 `protobuf:"varint,1,opt,name=urls,proto3" json:"urls,omitempty"`
	Users int64 `protobuf:"varint,2,opt,name=users,proto3" json:"users,omitempty"`
}

func (m *GetStatsResponse) Reset()      { *m = GetStatsResponse{} }
func (*GetStatsResponse) ProtoMessage() {}
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{3}
}
func (m *GetStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatsResponse.Merge(m, src)
}
func (m *GetStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatsResponse proto.InternalMessageInfo

func (m *GetStatsResponse) GetUrls() int64 {
	if m != nil {
		return m.Urls
	}
	return 0
}

func (m *GetStatsResponse) GetUsers() int64 {
	if m != nil {
		return m.Users
	}
	return 0
}

type GetURLRequest struct {
	ShortUrlId string `protobuf:"bytes,1,opt,name=short_url_id,json=shortUrlId,proto3" json:"short_url_id,omitempty"`
}

func (m *GetURLRequest) Reset()      { *m = GetURLRequest{} }
func (*GetURLRequest) ProtoMessage() {}
func (*GetURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{4}
}
func (m *GetURLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetURLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetURLRequest.Merge(m, src)
}
func (m *GetURLRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetURLRequest proto.InternalMessageInfo

func (m *GetURLRequest) GetShortUrlId() string {
	if m != nil {
		return m.ShortUrlId
	}
	return ""
}

type GetURLResponse struct {
	RedirectTo string `protobuf:"bytes,1,opt,name=redirect_to,json=redirectTo,proto3" json:"redirect_to,omitempty"`
}

func (m *GetURLResponse) Reset()      { *m = GetURLResponse{} }
func (*GetURLResponse) ProtoMessage() {}
func (*GetURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{5}
}
func (m *GetURLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetURLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetURLResponse.Merge(m, src)
}
func (m *GetURLResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetURLResponse proto.InternalMessageInfo

func (m *GetURLResponse) GetRedirectTo() string {
	if m != nil {
		return m.RedirectTo
	}
	return ""
}

type GetURLsByUserIDRequest struct {
}

func (m *GetURLsByUserIDRequest) Reset()      { *m = GetURLsByUserIDRequest{} }
func (*GetURLsByUserIDRequest) ProtoMessage() {}
func (*GetURLsByUserIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{6}
}
func (m *GetURLsByUserIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetURLsByUserIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetURLsByUserIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetURLsByUserIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetURLsByUserIDRequest.Merge(m, src)
}
func (m *GetURLsByUserIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetURLsByUserIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetURLsByUserIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetURLsByUserIDRequest proto.InternalMessageInfo

type ResponseURLs struct {
	ShortUrl string `protobuf:"bytes,1,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	BaseUrl  string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
}

func (m *ResponseURLs) Reset()      { *m = ResponseURLs{} }
func (*ResponseURLs) ProtoMessage() {}
func (*ResponseURLs) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{7}
}
func (m *ResponseURLs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseURLs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseURLs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseURLs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseURLs.Merge(m, src)
}
func (m *ResponseURLs) XXX_Size() int {
	return m.Size()
}
func (m *ResponseURLs) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseURLs.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseURLs proto.InternalMessageInfo

func (m *ResponseURLs) GetShortUrl() string {
	if m != nil {
		return m.ShortUrl
	}
	return ""
}

func (m *ResponseURLs) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

type GetURLsByUserIDResponse struct {
	ResponseUrls []*ResponseURLs `protobuf:"bytes,1,rep,name=response_urls,json=responseUrls,proto3" json:"response_urls,omitempty"`
}

func (m *GetURLsByUserIDResponse) Reset()      { *m = GetURLsByUserIDResponse{} }
func (*GetURLsByUserIDResponse) ProtoMessage() {}
func (*GetURLsByUserIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{8}
}
func (m *GetURLsByUserIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetURLsByUserIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetURLsByUserIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetURLsByUserIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetURLsByUserIDResponse.Merge(m, src)
}
func (m *GetURLsByUserIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetURLsByUserIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetURLsByUserIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetURLsByUserIDResponse proto.InternalMessageInfo

func (m *GetURLsByUserIDResponse) GetResponseUrls() []*ResponseURLs {
	if m != nil {
		return m.ResponseUrls
	}
	return nil
}

type PostURLRequest struct {
	BaseUrl string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
}

func (m *PostURLRequest) Reset()      { *m = PostURLRequest{} }
func (*PostURLRequest) ProtoMessage() {}
func (*PostURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{9}
}
func (m *PostURLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostURLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostURLRequest.Merge(m, src)
}
func (m *PostURLRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostURLRequest proto.InternalMessageInfo

func (m *PostURLRequest) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

type PostURLResponse struct {
	ShortUrl string `protobuf:"bytes,1,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
}

func (m *PostURLResponse) Reset()      { *m = PostURLResponse{} }
func (*PostURLResponse) ProtoMessage() {}
func (*PostURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{10}
}
func (m *PostURLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostURLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostURLResponse.Merge(m, src)
}
func (m *PostURLResponse) XXX_Size() int {
	return m.Size()
}
func (m *PostURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PostURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PostURLResponse proto.InternalMessageInfo

func (m *PostURLResponse) GetShortUrl() string {
	if m != nil {
		return m.ShortUrl
	}
	return ""
}

type PostURLBatch struct {
	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Url           string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *PostURLBatch) Reset()      { *m = PostURLBatch{} }
func (*PostURLBatch) ProtoMessage() {}
func (*PostURLBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{11}
}
func (m *PostURLBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostURLBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostURLBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostURLBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostURLBatch.Merge(m, src)
}
func (m *PostURLBatch) XXX_Size() int {
	return m.Size()
}
func (m *PostURLBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_PostURLBatch.DiscardUnknown(m)
}

var xxx_messageInfo_PostURLBatch proto.InternalMessageInfo

func (m *PostURLBatch) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *PostURLBatch) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type PostURLBatchRequest struct {
	RequestUrls []*PostURLBatch `protobuf:"bytes,1,rep,name=request_urls,json=requestUrls,proto3" json:"request_urls,omitempty"`
}

func (m *PostURLBatchRequest) Reset()      { *m = PostURLBatchRequest{} }
func (*PostURLBatchRequest) ProtoMessage() {}
func (*PostURLBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{12}
}
func (m *PostURLBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostURLBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostURLBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostURLBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostURLBatchRequest.Merge(m, src)
}
func (m *PostURLBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostURLBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostURLBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostURLBatchRequest proto.InternalMessageInfo

func (m *PostURLBatchRequest) GetRequestUrls() []*PostURLBatch {
	if m != nil {
		return m.RequestUrls
	}
	return nil
}

type PostURLBatchResponse struct {
	ResponseUrls []*PostURLBatch `protobuf:"bytes,1,rep,name=response_urls,json=responseUrls,proto3" json:"response_urls,omitempty"`
}

func (m *PostURLBatchResponse) Reset()      { *m = PostURLBatchResponse{} }
func (*PostURLBatchResponse) ProtoMessage() {}
func (*PostURLBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{13}
}
func (m *PostURLBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostURLBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostURLBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostURLBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostURLBatchResponse.Merge(m, src)
}
func (m *PostURLBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *PostURLBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PostURLBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PostURLBatchResponse proto.InternalMessageInfo

func (m *PostURLBatchResponse) GetResponseUrls() []*PostURLBatch {
	if m != nil {
		return m.ResponseUrls
	}
	return nil
}

type DeleteURLBatch struct {
	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (m *DeleteURLBatch) Reset()      { *m = DeleteURLBatch{} }
func (*DeleteURLBatch) ProtoMessage() {}
func (*DeleteURLBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{14}
}
func (m *DeleteURLBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteURLBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteURLBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteURLBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteURLBatch.Merge(m, src)
}
func (m *DeleteURLBatch) XXX_Size() int {
	return m.Size()
}
func (m *DeleteURLBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteURLBatch.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteURLBatch proto.InternalMessageInfo

func (m *DeleteURLBatch) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type DeleteURLBatchRequest struct {
	RequestUrls *DeleteURLBatch `protobuf:"bytes,1,opt,name=request_urls,json=requestUrls,proto3" json:"request_urls,omitempty"`
}

func (m *DeleteURLBatchRequest) Reset()      { *m = DeleteURLBatchRequest{} }
func (*DeleteURLBatchRequest) ProtoMessage() {}
func (*DeleteURLBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{15}
}
func (m *DeleteURLBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteURLBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteURLBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteURLBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteURLBatchRequest.Merge(m, src)
}
func (m *DeleteURLBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteURLBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteURLBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteURLBatchRequest proto.InternalMessageInfo

func (m *DeleteURLBatchRequest) GetRequestUrls() *DeleteURLBatch {
	if m != nil {
		return m.RequestUrls
	}
	return nil
}

type DeleteURLBatchResponse struct {
}

func (m *DeleteURLBatchResponse) Reset()      { *m = DeleteURLBatchResponse{} }
func (*DeleteURLBatchResponse) ProtoMessage() {}
func (*DeleteURLBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12a4512b96b720f2, []int{16}
}
func (m *DeleteURLBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteURLBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteURLBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteURLBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteURLBatchResponse.Merge(m, src)
}
func (m *DeleteURLBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteURLBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteURLBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteURLBatchResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PingRequest)(nil), "protoapi.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "protoapi.PingResponse")
	proto.RegisterType((*GetStatsRequest)(nil), "protoapi.GetStatsRequest")
	proto.RegisterType((*GetStatsResponse)(nil), "protoapi.GetStatsResponse")
	proto.RegisterType((*GetURLRequest)(nil), "protoapi.GetURLRequest")
	proto.RegisterType((*GetURLResponse)(nil), "protoapi.GetURLResponse")
	proto.RegisterType((*GetURLsByUserIDRequest)(nil), "protoapi.GetURLsByUserIDRequest")
	proto.RegisterType((*ResponseURLs)(nil), "protoapi.ResponseURLs")
	proto.RegisterType((*GetURLsByUserIDResponse)(nil), "protoapi.GetURLsByUserIDResponse")
	proto.RegisterType((*PostURLRequest)(nil), "protoapi.PostURLRequest")
	proto.RegisterType((*PostURLResponse)(nil), "protoapi.PostURLResponse")
	proto.RegisterType((*PostURLBatch)(nil), "protoapi.PostURLBatch")
	proto.RegisterType((*PostURLBatchRequest)(nil), "protoapi.PostURLBatchRequest")
	proto.RegisterType((*PostURLBatchResponse)(nil), "protoapi.PostURLBatchResponse")
	proto.RegisterType((*DeleteURLBatch)(nil), "protoapi.DeleteURLBatch")
	proto.RegisterType((*DeleteURLBatchRequest)(nil), "protoapi.DeleteURLBatchRequest")
	proto.RegisterType((*DeleteURLBatchResponse)(nil), "protoapi.DeleteURLBatchResponse")
}

func init() { proto.RegisterFile("api/proto/service.proto", fileDescriptor_12a4512b96b720f2) }

var fileDescriptor_12a4512b96b720f2 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0xdf, 0x2d, 0xb5, 0x85, 0xc7, 0x42, 0xeb, 0xd8, 0xd2, 0x05, 0xe3, 0x14, 0x27, 0x9a, 0x90,
	0x98, 0xd0, 0x14, 0xf5, 0x60, 0x6a, 0x4c, 0x24, 0x8d, 0x84, 0x44, 0x13, 0x02, 0xa5, 0x57, 0xb2,
	0x85, 0x89, 0xdd, 0x64, 0xc3, 0xe2, 0xcc, 0x60, 0xe2, 0xcd, 0x8f, 0xe0, 0xc7, 0xf0, 0xa3, 0x78,
	0xe4, 0xd8, 0xa3, 0x2c, 0x17, 0x8f, 0xfd, 0x04, 0xc6, 0x30, 0x3b, 0xc3, 0xfe, 0xa1, 0x34, 0x9e,
	0x76, 0xe6, 0xbd, 0xdf, 0xfb, 0xbd, 0xf7, 0x7e, 0xf3, 0xde, 0xc2, 0x91, 0x33, 0x71, 0x4f, 0x26,
	0xcc, 0x17, 0xfe, 0x09, 0xa7, 0xec, 0xab, 0x3b, 0xa4, 0x75, 0x79, 0x43, 0x59, 0xf9, 0x71, 0x26,
	0x2e, 0x29, 0x40, 0xbe, 0xe3, 0x8e, 0x3f, 0x77, 0xe9, 0x97, 0x29, 0xe5, 0x82, 0x14, 0xc1, 0x0a,
	0xaf, 0x7c, 0xe2, 0x8f, 0x39, 0x25, 0x0f, 0x61, 0xaf, 0x45, 0x45, 0x4f, 0x38, 0x82, 0x6b, 0xc8,
	0x5b, 0xd8, 0x8f, 0x4c, 0x21, 0x0c, 0x21, 0xd8, 0x9e, 0x32, 0x8f, 0xdb, 0x66, 0xd5, 0xac, 0x65,
	0xba, 0xf2, 0x8c, 0x0e, 0xe0, 0xc1, 0x94, 0x53, 0xc6, 0xed, 0x2d, 0x69, 0x0c, 0x2f, 0xe4, 0x14,
	0x0a, 0x2d, 0x2a, 0xfa, 0xdd, 0x8f, 0x8a, 0x0e, 0x55, 0xc1, 0xe2, 0xd7, 0x3e, 0x13, 0x83, 0x29,
	0xf3, 0x06, 0xee, 0x48, 0x52, 0xe4, 0xba, 0x20, 0x6d, 0x7d, 0xe6, 0xb5, 0x47, 0xe4, 0x14, 0x8a,
	0x3a, 0x44, 0xa5, 0x3b, 0x86, 0x3c, 0xa3, 0x23, 0x97, 0xd1, 0xa1, 0x18, 0x08, 0x5f, 0x87, 0x68,
	0xd3, 0x85, 0x4f, 0x6c, 0x28, 0x85, 0x21, 0xbc, 0xf9, 0xad, 0xcf, 0x29, 0x6b, 0x9f, 0xeb, 0xea,
	0x3f, 0x80, 0xa5, 0x69, 0x96, 0x6e, 0xf4, 0x18, 0x72, 0xab, 0xf4, 0x8a, 0x28, 0xab, 0x73, 0xa3,
	0x32, 0x64, 0xaf, 0x1c, 0x4e, 0xa5, 0x6f, 0x4b, 0xfa, 0x76, 0x97, 0xf7, 0x3e, 0xf3, 0xc8, 0x25,
	0x1c, 0xad, 0x65, 0x50, 0xd5, 0x9d, 0x41, 0x81, 0xa9, 0xf3, 0x40, 0xa9, 0x92, 0xa9, 0xe5, 0x1b,
	0xa5, 0xba, 0x16, 0xbd, 0x1e, 0xaf, 0xa0, 0x6b, 0x69, 0x70, 0x9f, 0x79, 0x9c, 0xbc, 0x80, 0x62,
	0xc7, 0xe7, 0x71, 0x81, 0xe2, 0x45, 0x98, 0xc9, 0x22, 0xea, 0xb0, 0xb7, 0x02, 0xab, 0xe4, 0xf7,
	0xf5, 0x43, 0x5a, 0x60, 0x29, 0x7c, 0xd3, 0x11, 0xc3, 0x6b, 0xf4, 0x1c, 0x8a, 0x43, 0x9f, 0x31,
	0xea, 0x39, 0xc2, 0xf5, 0xc7, 0x91, 0xfa, 0x85, 0x98, 0xb5, 0x3d, 0x42, 0xfb, 0x90, 0x89, 0x14,
	0x58, 0x1e, 0x49, 0x07, 0x1e, 0xc5, 0x89, 0x74, 0xa9, 0x6f, 0xc0, 0x62, 0xe1, 0x71, 0x43, 0xe3,
	0x89, 0xa0, 0xbc, 0xc2, 0xca, 0xbe, 0x7b, 0x70, 0x90, 0x64, 0xfc, 0x6f, 0x31, 0x13, 0x61, 0x49,
	0x31, 0x9f, 0x41, 0xf1, 0x9c, 0x7a, 0x54, 0xd0, 0x55, 0xc7, 0xd1, 0xa0, 0x66, 0x6a, 0xb9, 0x70,
	0x50, 0xc9, 0x05, 0x1c, 0x26, 0x51, 0xba, 0x9d, 0xb3, 0xb5, 0x76, 0xcc, 0x5a, 0xbe, 0x61, 0x47,
	0xa9, 0x53, 0x61, 0x89, 0x86, 0x6c, 0x28, 0xa5, 0x59, 0xc3, 0xca, 0x1a, 0x7f, 0x33, 0x90, 0xeb,
	0x2d, 0x9f, 0x84, 0x8e, 0x29, 0x43, 0xaf, 0x61, 0x7b, 0xb9, 0x71, 0xe8, 0x30, 0xd6, 0x51, 0xb4,
	0x90, 0x95, 0x52, 0xda, 0xac, 0x74, 0x79, 0x0f, 0x59, 0xbd, 0x85, 0xa8, 0x1c, 0x61, 0x52, 0xcb,
	0x5a, 0xa9, 0xdc, 0xe5, 0x5a, 0x49, 0xbb, 0x13, 0x8e, 0x30, 0x3a, 0x4a, 0xa0, 0xa2, 0xd9, 0xab,
	0xd8, 0xeb, 0x0e, 0x15, 0x7c, 0x29, 0x7f, 0x0c, 0xf1, 0xf9, 0x47, 0xd5, 0x34, 0x38, 0xbd, 0x7c,
	0x95, 0xa7, 0xf7, 0x20, 0x14, 0xef, 0x3b, 0xd8, 0x55, 0x0f, 0x8a, 0xec, 0xb5, 0x37, 0xd6, 0x3c,
	0xe5, 0x3b, 0x3c, 0x2a, 0xfe, 0x53, 0x6a, 0xc4, 0x9f, 0x6c, 0x18, 0x14, 0xc5, 0x84, 0x37, 0xb9,
	0x15, 0x5d, 0x6f, 0x6d, 0x82, 0x8e, 0x37, 0x3e, 0xbf, 0xa2, 0xac, 0x6e, 0x06, 0x84, 0xa4, 0xcd,
	0x57, 0xb3, 0x39, 0x36, 0x6e, 0xe6, 0xd8, 0xb8, 0x9d, 0x63, 0xf3, 0x7b, 0x80, 0xcd, 0x9f, 0x01,
	0x36, 0x7f, 0x05, 0xd8, 0x9c, 0x05, 0xd8, 0xfc, 0x1d, 0x60, 0xf3, 0x4f, 0x80, 0x8d, 0xdb, 0x00,
	0x9b, 0x3f, 0x16, 0xd8, 0x98, 0x2d, 0xb0, 0x71, 0xb3, 0xc0, 0xc6, 0xd5, 0x8e, 0xa4, 0x7d, 0xf9,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0xda, 0x33, 0xeb, 0xda, 0xd5, 0x05, 0x00, 0x00,
}

func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetStatsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStatsRequest)
	if !ok {
		that2, ok := that.(GetStatsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetStatsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStatsResponse)
	if !ok {
		that2, ok := that.(GetStatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Urls != that1.Urls {
		return false
	}
	if this.Users != that1.Users {
		return false
	}
	return true
}
func (this *GetURLRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetURLRequest)
	if !ok {
		that2, ok := that.(GetURLRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShortUrlId != that1.ShortUrlId {
		return false
	}
	return true
}
func (this *GetURLResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetURLResponse)
	if !ok {
		that2, ok := that.(GetURLResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RedirectTo != that1.RedirectTo {
		return false
	}
	return true
}
func (this *GetURLsByUserIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetURLsByUserIDRequest)
	if !ok {
		that2, ok := that.(GetURLsByUserIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseURLs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseURLs)
	if !ok {
		that2, ok := that.(ResponseURLs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShortUrl != that1.ShortUrl {
		return false
	}
	if this.BaseUrl != that1.BaseUrl {
		return false
	}
	return true
}
func (this *GetURLsByUserIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetURLsByUserIDResponse)
	if !ok {
		that2, ok := that.(GetURLsByUserIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ResponseUrls) != len(that1.ResponseUrls) {
		return false
	}
	for i := range this.ResponseUrls {
		if !this.ResponseUrls[i].Equal(that1.ResponseUrls[i]) {
			return false
		}
	}
	return true
}
func (this *PostURLRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostURLRequest)
	if !ok {
		that2, ok := that.(PostURLRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BaseUrl != that1.BaseUrl {
		return false
	}
	return true
}
func (this *PostURLResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostURLResponse)
	if !ok {
		that2, ok := that.(PostURLResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShortUrl != that1.ShortUrl {
		return false
	}
	return true
}
func (this *PostURLBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostURLBatch)
	if !ok {
		that2, ok := that.(PostURLBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CorrelationId != that1.CorrelationId {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *PostURLBatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostURLBatchRequest)
	if !ok {
		that2, ok := that.(PostURLBatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RequestUrls) != len(that1.RequestUrls) {
		return false
	}
	for i := range this.RequestUrls {
		if !this.RequestUrls[i].Equal(that1.RequestUrls[i]) {
			return false
		}
	}
	return true
}
func (this *PostURLBatchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PostURLBatchResponse)
	if !ok {
		that2, ok := that.(PostURLBatchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ResponseUrls) != len(that1.ResponseUrls) {
		return false
	}
	for i := range this.ResponseUrls {
		if !this.ResponseUrls[i].Equal(that1.ResponseUrls[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteURLBatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteURLBatch)
	if !ok {
		that2, ok := that.(DeleteURLBatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Urls) != len(that1.Urls) {
		return false
	}
	for i := range this.Urls {
		if this.Urls[i] != that1.Urls[i] {
			return false
		}
	}
	return true
}
func (this *DeleteURLBatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteURLBatchRequest)
	if !ok {
		that2, ok := that.(DeleteURLBatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestUrls.Equal(that1.RequestUrls) {
		return false
	}
	return true
}
func (this *DeleteURLBatchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteURLBatchResponse)
	if !ok {
		that2, ok := that.(DeleteURLBatchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&protoapi.PingRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&protoapi.PingResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStatsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&protoapi.GetStatsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStatsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protoapi.GetStatsResponse{")
	s = append(s, "Urls: "+fmt.Sprintf("%#v", this.Urls)+",\n")
	s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetURLRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.GetURLRequest{")
	s = append(s, "ShortUrlId: "+fmt.Sprintf("%#v", this.ShortUrlId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetURLResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.GetURLResponse{")
	s = append(s, "RedirectTo: "+fmt.Sprintf("%#v", this.RedirectTo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetURLsByUserIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&protoapi.GetURLsByUserIDRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseURLs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protoapi.ResponseURLs{")
	s = append(s, "ShortUrl: "+fmt.Sprintf("%#v", this.ShortUrl)+",\n")
	s = append(s, "BaseUrl: "+fmt.Sprintf("%#v", this.BaseUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetURLsByUserIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.GetURLsByUserIDResponse{")
	if this.ResponseUrls != nil {
		s = append(s, "ResponseUrls: "+fmt.Sprintf("%#v", this.ResponseUrls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostURLRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.PostURLRequest{")
	s = append(s, "BaseUrl: "+fmt.Sprintf("%#v", this.BaseUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostURLResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.PostURLResponse{")
	s = append(s, "ShortUrl: "+fmt.Sprintf("%#v", this.ShortUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostURLBatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protoapi.PostURLBatch{")
	s = append(s, "CorrelationId: "+fmt.Sprintf("%#v", this.CorrelationId)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostURLBatchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.PostURLBatchRequest{")
	if this.RequestUrls != nil {
		s = append(s, "RequestUrls: "+fmt.Sprintf("%#v", this.RequestUrls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostURLBatchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.PostURLBatchResponse{")
	if this.ResponseUrls != nil {
		s = append(s, "ResponseUrls: "+fmt.Sprintf("%#v", this.ResponseUrls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteURLBatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.DeleteURLBatch{")
	s = append(s, "Urls: "+fmt.Sprintf("%#v", this.Urls)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteURLBatchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protoapi.DeleteURLBatchRequest{")
	if this.RequestUrls != nil {
		s = append(s, "RequestUrls: "+fmt.Sprintf("%#v", this.RequestUrls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteURLBatchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&protoapi.DeleteURLBatchResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShortenerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error)
	GetURLsByUserID(ctx context.Context, in *GetURLsByUserIDRequest, opts ...grpc.CallOption) (*GetURLsByUserIDResponse, error)
	PostURL(ctx context.Context, in *PostURLRequest, opts ...grpc.CallOption) (*PostURLResponse, error)
	PostURLBatch(ctx context.Context, in *PostURLBatchRequest, opts ...grpc.CallOption) (*PostURLBatchResponse, error)
	DeleteURLBatch(ctx context.Context, in *DeleteURLBatchRequest, opts ...grpc.CallOption) (*DeleteURLBatchResponse, error)
}

type shortenerClient struct {
	cc *grpc.ClientConn
}

func NewShortenerClient(cc *grpc.ClientConn) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protoapi.Shortener/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/protoapi.Shortener/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetURL(ctx context.Context, in *GetURLRequest, opts ...grpc.CallOption) (*GetURLResponse, error) {
	out := new(GetURLResponse)
	err := c.cc.Invoke(ctx, "/protoapi.Shortener/GetURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetURLsByUserID(ctx context.Context, in *GetURLsByUserIDRequest, opts ...grpc.CallOption) (*GetURLsByUserIDResponse, error) {
	out := new(GetURLsByUserIDResponse)
	err := c.cc.Invoke(ctx, "/protoapi.Shortener/GetURLsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PostURL(ctx context.Context, in *PostURLRequest, opts ...grpc.CallOption) (*PostURLResponse, error) {
	out := new(PostURLResponse)
	err := c.cc.Invoke(ctx, "/protoapi.Shortener/PostURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PostURLBatch(ctx context.Context, in *PostURLBatchRequest, opts ...grpc.CallOption) (*PostURLBatchResponse, error) {
	out := new(PostURLBatchResponse)
	err := c.cc.Invoke(ctx, "/protoapi.Shortener/PostURLBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteURLBatch(ctx context.Context, in *DeleteURLBatchRequest, opts ...grpc.CallOption) (*DeleteURLBatchResponse, error) {
	out := new(DeleteURLBatchResponse)
	err := c.cc.Invoke(ctx, "/protoapi.Shortener/DeleteURLBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
type ShortenerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	GetURL(context.Context, *GetURLRequest) (*GetURLResponse, error)
	GetURLsByUserID(context.Context, *GetURLsByUserIDRequest) (*GetURLsByUserIDResponse, error)
	PostURL(context.Context, *PostURLRequest) (*PostURLResponse, error)
	PostURLBatch(context.Context, *PostURLBatchRequest) (*PostURLBatchResponse, error)
	DeleteURLBatch(context.Context, *DeleteURLBatchRequest) (*DeleteURLBatchResponse, error)
}

// UnimplementedShortenerServer can be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (*UnimplementedShortenerServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedShortenerServer) GetStats(ctx context.Context, req *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedShortenerServer) GetURL(ctx context.Context, req *GetURLRequest) (*GetURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (*UnimplementedShortenerServer) GetURLsByUserID(ctx context.Context, req *GetURLsByUserIDRequest) (*GetURLsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLsByUserID not implemented")
}
func (*UnimplementedShortenerServer) PostURL(ctx context.Context, req *PostURLRequest) (*PostURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostURL not implemented")
}
func (*UnimplementedShortenerServer) PostURLBatch(ctx context.Context, req *PostURLBatchRequest) (*PostURLBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostURLBatch not implemented")
}
func (*UnimplementedShortenerServer) DeleteURLBatch(ctx context.Context, req *DeleteURLBatchRequest) (*DeleteURLBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLBatch not implemented")
}

func RegisterShortenerServer(s *grpc.Server, srv ShortenerServer) {
	s.RegisterService(&_Shortener_serviceDesc, srv)
}

func _Shortener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.Shortener/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.Shortener/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.Shortener/GetURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetURL(ctx, req.(*GetURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetURLsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetURLsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.Shortener/GetURLsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetURLsByUserID(ctx, req.(*GetURLsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PostURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.Shortener/PostURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostURL(ctx, req.(*PostURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PostURLBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostURLBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostURLBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.Shortener/PostURLBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostURLBatch(ctx, req.(*PostURLBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteURLBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteURLBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.Shortener/DeleteURLBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteURLBatch(ctx, req.(*DeleteURLBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shortener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoapi.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Shortener_Ping_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shortener_GetStats_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _Shortener_GetURL_Handler,
		},
		{
			MethodName: "GetURLsByUserID",
			Handler:    _Shortener_GetURLsByUserID_Handler,
		},
		{
			MethodName: "PostURL",
			Handler:    _Shortener_PostURL_Handler,
		},
		{
			MethodName: "PostURLBatch",
			Handler:    _Shortener_PostURLBatch_Handler,
		},
		{
			MethodName: "DeleteURLBatch",
			Handler:    _Shortener_DeleteURLBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/service.proto",
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Users != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Users))
		i--
		dAtA[i] = 0x10
	}
	if m.Urls != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Urls))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetURLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetURLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetURLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShortUrlId) > 0 {
		i -= len(m.ShortUrlId)
		copy(dAtA[i:], m.ShortUrlId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ShortUrlId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetURLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetURLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetURLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedirectTo) > 0 {
		i -= len(m.RedirectTo)
		copy(dAtA[i:], m.RedirectTo)
		i = encodeVarintService(dAtA, i, uint64(len(m.RedirectTo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetURLsByUserIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetURLsByUserIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetURLsByUserIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseURLs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseURLs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseURLs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseUrl) > 0 {
		i -= len(m.BaseUrl)
		copy(dAtA[i:], m.BaseUrl)
		i = encodeVarintService(dAtA, i, uint64(len(m.BaseUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShortUrl) > 0 {
		i -= len(m.ShortUrl)
		copy(dAtA[i:], m.ShortUrl)
		i = encodeVarintService(dAtA, i, uint64(len(m.ShortUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetURLsByUserIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetURLsByUserIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetURLsByUserIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResponseUrls) > 0 {
		for iNdEx := len(m.ResponseUrls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseUrls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostURLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostURLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostURLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseUrl) > 0 {
		i -= len(m.BaseUrl)
		copy(dAtA[i:], m.BaseUrl)
		i = encodeVarintService(dAtA, i, uint64(len(m.BaseUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostURLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostURLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostURLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShortUrl) > 0 {
		i -= len(m.ShortUrl)
		copy(dAtA[i:], m.ShortUrl)
		i = encodeVarintService(dAtA, i, uint64(len(m.ShortUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostURLBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostURLBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostURLBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintService(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintService(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostURLBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostURLBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostURLBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestUrls) > 0 {
		for iNdEx := len(m.RequestUrls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequestUrls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostURLBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostURLBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostURLBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResponseUrls) > 0 {
		for iNdEx := len(m.ResponseUrls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResponseUrls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteURLBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteURLBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteURLBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteURLBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteURLBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteURLBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestUrls != nil {
		{
			size, err := m.RequestUrls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteURLBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteURLBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteURLBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Urls != 0 {
		n += 1 + sovService(uint64(m.Urls))
	}
	if m.Users != 0 {
		n += 1 + sovService(uint64(m.Users))
	}
	return n
}

func (m *GetURLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShortUrlId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetURLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RedirectTo)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetURLsByUserIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseURLs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShortUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetURLsByUserIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResponseUrls) > 0 {
		for _, e := range m.ResponseUrls {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *PostURLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PostURLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShortUrl)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PostURLBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PostURLBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestUrls) > 0 {
		for _, e := range m.RequestUrls {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *PostURLBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResponseUrls) > 0 {
		for _, e := range m.ResponseUrls {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *DeleteURLBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *DeleteURLBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestUrls != nil {
		l = m.RequestUrls.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *DeleteURLBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetStatsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetStatsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetStatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetStatsResponse{`,
		`Urls:` + fmt.Sprintf("%v", this.Urls) + `,`,
		`Users:` + fmt.Sprintf("%v", this.Users) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetURLRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetURLRequest{`,
		`ShortUrlId:` + fmt.Sprintf("%v", this.ShortUrlId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetURLResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetURLResponse{`,
		`RedirectTo:` + fmt.Sprintf("%v", this.RedirectTo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetURLsByUserIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetURLsByUserIDRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseURLs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseURLs{`,
		`ShortUrl:` + fmt.Sprintf("%v", this.ShortUrl) + `,`,
		`BaseUrl:` + fmt.Sprintf("%v", this.BaseUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetURLsByUserIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResponseUrls := "[]*ResponseURLs{"
	for _, f := range this.ResponseUrls {
		repeatedStringForResponseUrls += strings.Replace(f.String(), "ResponseURLs", "ResponseURLs", 1) + ","
	}
	repeatedStringForResponseUrls += "}"
	s := strings.Join([]string{`&GetURLsByUserIDResponse{`,
		`ResponseUrls:` + repeatedStringForResponseUrls + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostURLRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostURLRequest{`,
		`BaseUrl:` + fmt.Sprintf("%v", this.BaseUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostURLResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostURLResponse{`,
		`ShortUrl:` + fmt.Sprintf("%v", this.ShortUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostURLBatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostURLBatch{`,
		`CorrelationId:` + fmt.Sprintf("%v", this.CorrelationId) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostURLBatchRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequestUrls := "[]*PostURLBatch{"
	for _, f := range this.RequestUrls {
		repeatedStringForRequestUrls += strings.Replace(f.String(), "PostURLBatch", "PostURLBatch", 1) + ","
	}
	repeatedStringForRequestUrls += "}"
	s := strings.Join([]string{`&PostURLBatchRequest{`,
		`RequestUrls:` + repeatedStringForRequestUrls + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostURLBatchResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResponseUrls := "[]*PostURLBatch{"
	for _, f := range this.ResponseUrls {
		repeatedStringForResponseUrls += strings.Replace(f.String(), "PostURLBatch", "PostURLBatch", 1) + ","
	}
	repeatedStringForResponseUrls += "}"
	s := strings.Join([]string{`&PostURLBatchResponse{`,
		`ResponseUrls:` + repeatedStringForResponseUrls + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteURLBatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteURLBatch{`,
		`Urls:` + fmt.Sprintf("%v", this.Urls) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteURLBatchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteURLBatchRequest{`,
		`RequestUrls:` + strings.Replace(this.RequestUrls.String(), "DeleteURLBatch", "DeleteURLBatch", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteURLBatchResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteURLBatchResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			m.Urls = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Urls |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			m.Users = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Users |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetURLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetURLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetURLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortUrlId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortUrlId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetURLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetURLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetURLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetURLsByUserIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetURLsByUserIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetURLsByUserIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseURLs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseURLs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseURLs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetURLsByUserIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetURLsByUserIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetURLsByUserIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseUrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseUrls = append(m.ResponseUrls, &ResponseURLs{})
			if err := m.ResponseUrls[len(m.ResponseUrls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostURLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostURLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostURLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostURLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostURLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostURLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostURLBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostURLBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostURLBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostURLBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostURLBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostURLBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestUrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestUrls = append(m.RequestUrls, &PostURLBatch{})
			if err := m.RequestUrls[len(m.RequestUrls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostURLBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostURLBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostURLBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseUrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseUrls = append(m.ResponseUrls, &PostURLBatch{})
			if err := m.ResponseUrls[len(m.ResponseUrls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteURLBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteURLBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteURLBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteURLBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteURLBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteURLBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestUrls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestUrls == nil {
				m.RequestUrls = &DeleteURLBatch{}
			}
			if err := m.RequestUrls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteURLBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteURLBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteURLBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
